<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.Concurrent" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ output extension=".cs" #>
<#
            string connectionString = "Data Source=DESKTOP-D5Q8Q8S;Initial Catalog=MailService;User ID=sirius; Password=1234567";
            SqlDataReader rdr = null;
            List<Tuple<Guid, string>> CommandNameAndIDs = new List<Tuple<Guid, string>>();
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("pbl.spGetAccountsForEnum_", conn);
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                SqlCommandBuilder.DeriveParameters(cmd);

                rdr = cmd.ExecuteReader();

                using (rdr)
                {
                    while(rdr.Read())
                    {
                        CommandNameAndIDs.Add(new Tuple<Guid, string>(rdr.GetGuid(0), rdr.GetString(1)));
                    }
                }
            }
#>
using System;
using System.Collections.Concurrent;

namespace MailService.Core.Model
{
		public enum MailServiceAccounts : byte
		{
		<#int counter = 0;#>
		Unknown = <#=counter++#>,
		<#foreach(var CommandNameAndID in CommandNameAndIDs)
		{#>
			<#=CommandNameAndID.Item2#> = <#=counter++#>,
		<#}#>
	}
	    public class MailServiceDic
		{
		readonly static Lazy<MailServiceDic> _instance = new Lazy<MailServiceDic>(() => new MailServiceDic());

		        public static MailServiceDic Instance
             => _instance.Value;

				readonly ConcurrentDictionary<MailServiceAccounts, Guid> _items = new ConcurrentDictionary<MailServiceAccounts, Guid>()
		{
			[MailServiceAccounts.Unknown] = Guid.Empty,
		<#foreach(var CommandNameAndID in CommandNameAndIDs)
		{#>
			[MailServiceAccounts.<#=CommandNameAndID.Item2#>] = new Guid("<#=CommandNameAndID.Item1#>"),
		<#}#>};

		public Guid this[MailServiceAccounts account]
        {
            get
            {
                Guid accountId = Guid.Empty;
                _items.TryGetValue(account, out accountId);
                return accountId;
            }
        }
		}
}
